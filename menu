#!/bin/bash

# place me in /usr/local/bin/

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games
KEYS="/usr/local/bin/keys.py" # button handling script

calc_size(){
  # rpi screen is 40x30
  if [ -z $(command -v resize) ]; then
        # resize is not available, do it manually
        COLUMNS=$(tput cols)
        LINES=$(tput lines)
        export COLUMNS LINES;
  else
    eval `resize`
  fi
  W=$(( $COLUMNS - 4 ))
  H=$(( $LINES - 4 ))
  MH=$(( $H - 8 ))
}

show_err(){
  whiptail --clear --msgbox --title "Error" "Error: $@" ${H} ${W}
}

show_msg(){
  MSGH=$(echo "$@" | wc -l)
  CMDOPT='--clear --msgbox --title "Info"'
  if [ "$MSGH" -gt "$MH" ]; then
    CMDOPT="--scrolltext $CMDOPT"
  fi
  whiptail $CMDOPT "$@" ${H} ${W}
}

do_getmode(){
  # not implemented yet
  echo "unknown"
}

do_sysinfo(){
  s_mode=$(do_getmode)
  s_ip=$(hostname -I)
  s_eth0_status=$(cat /sys/class/net/eth0/operstate)
  s_wlan0_status=$(cat /sys/class/net/wlan0/operstate)
  s_uptime=$(uptime -p)
  s_date=$(date +"%F %T %Z")
  s_disk=$(df -h / | awk '{print $2, $3, $4, $5}')
  s_mem=$(free -h | sed 's/^Mem://' | head -2 | awk '{print $1, $2, $3}')
  s_load=$(cat /proc/loadavg | awk '{print $1, $2, $3}')
  MSG="\
Mode: $s_mode
IP: $s_ip
eth0: $s_eth0_status
wlan0: $s_wlan0_status
Uptime: $s_uptime
Date: $s_date

Disk:
$s_disk

Mem:
$s_mem

Load averages 1/5/15:
$s_load
"
  show_msg "$MSG"
}

do_wifiscan(){
  # canibalise iwscan script
  IF="wlan0"
  sudo ifconfig ${IF} up
  MSG=$(sudo iwlist ${IF} scan | \
    egrep "Address:|Channel:|ESSID:|Encryption key:|Quality=" | \
    sed -e 's/Channel:/ch:/' -e 's/Encryption //' \
        -e 's/Quality=/q:/' -e 's/ Signal level=.*//' | \
    sed 'N;N;N;N;s/\n/;/g' | \
    sed -e 's/^[ \t]*//' -e 's/;[ \t]*/;/g' \
        -e 's/Cell.*- Address: /BSSID:/' | \
    while read line
    do
      for a in $(seq 5)
      do
        echo $line | cut -d\; -f${a} | while read subline
        do
          # do something on each element if needed
          if [[ $subline =~ ^q: ]]; then
            subline="q:$(( 100 * $(echo $subline | cut -d: -f2) ))%"
          fi
          echo $subline
        done
      done | sort | \
      sed -e 'N;N;N;N;s/\n/;/g' -e 's/[BE]SSID://g' -e 's/q://' \
          -e 's/ch://' -e 's/key:on/E/' -e 's/key:off/O/'
    done | awk -F\; '{printf "%-3s %-2s %-1s %s\n", $5,$2,$4,$3}' | \
      sort -r)
  show_msg "$MSG"
}

do_ifdown(){
  IF=$1
  MSG=$(sudo /sbin/ifdown $IF 2>&1)
  sudo ifconfig $IF down
  show_msg "$MSG"
}

do_ifup(){
  IF="$1"
  CFG="$2"
  if [ "$CFG" ]; then
    if grep "^iface ${CFG}" /etc/network/interfaces >/dev/null; then
      MSG=$(sudo /sbin/ifup ${IF}=${CFG} 2>&1)
    else
      MSG="${CFG}: no such configuration, check /etc/network/interfaces"
    fi
  else
    MSG=$(sudo /sbin/ifup ${IF} 2>&1)
  fi
  show_msg "$MSG"
}

do_mac(){
  # usage: do_mack <action> <interface>
  ACTION=$1
  IF=$2
  case "$ACTION" in
    random)
      MSG=$(sudo macchanger -r ${IF} 2>&1)
      ;;
    reset)
      MSG=$(sudo macchanger -p ${IF} 2>&1)
      ;;
    show)
      MSG=$(sudo macchanger -s ${IF} 2>&1)
      ;;
    *) show_err "unrecognized option";;
  esac
  show_msg "$MSG"
}

#  menus and submenus

## main
menu_main(){
  while true; do
    FUN=$(whiptail --clear --nocancel --notags --title "Main Menu" --menu "" ${H} ${W} ${MH} \
      "1" "System info" \
      "2" "Connectivity >>" \
      "0" "Exit/Reload" 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
      case "$FUN" in
        1) do_sysinfo;;
        2) menu_conn;;
        0) return;;
        *) show_err "unrecognized option";;
      esac
    else
      return
    fi
  done
}

## connectivity
menu_conn(){
  while true; do
    FUN=$(whiptail --clear --nocancel --notags --title "Connectivity" --menu "" ${H} ${W} ${MH}  \
      "0" "<< Back" \
      "1" "Wifi scan" \
      "2" "Wifi connect 1" \
      "3" "Wifi connect 2" \
      "4" "Wifi disconnect" \
      "5" "Wifi MAC show" \
      "6" "Wifi MAC random" \
      "7" "Wifi MAC reset" \
      "8" "LAN connect" \
      "9" "LAN disconnect" \
      "10" "LAN MAC show" \
      "11" "LAN MAC random" \
      "12" "LAN MAC reset" \
           3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
      case "$FUN" in
        1) do_wifiscan;;
        2) do_ifup wlan0 config-w1;;
        3) do_ifup wlan0 config-w2;;
        4) do_ifdown wlan0;;
        5) do_mac show wlan0;;
        6) do_mac random wlan0;;
        7) do_mac reset wlan0;;
        8) do_ifup eth0;;
        9) do_ifdown eth0;;
        10) do_mac show eth0;;
        11) do_mac random eth0;;
        12) do_mac reset eth0;;
        0) return;;
        *) show_err "unrecognized option";;
      esac
    else
      return
    fi
  done
}

# it does not belong here
# check if we have key handling running on startup
pgrep -f ${KEYS} >/dev/null || sudo ${KEYS} &

calc_size
menu_main

